//
// Generated file, do not edit! Created by opp_msgtool 6.0 from packet.msg.
//

#ifndef __PACKET_M_H
#define __PACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

struct applicationPacket;
class TcpIpPacket;
/**
 * Struct generated from packet.msg:1 by opp_msgtool.
 */
struct applicationPacket
{
    applicationPacket();
    int data = 0;
    int protocol = 0;
    int ip = 0;
    int portNo = 0;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const applicationPacket& a);
void __doUnpacking(omnetpp::cCommBuffer *b, applicationPacket& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const applicationPacket& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, applicationPacket& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>packet.msg:7</tt> by opp_msgtool.
 * <pre>
 * packet TcpIpPacket
 * {
 *     int srcAdd;
 *     int destAdd;
 *     applicationPacket appHeader;
 *     int tcpHeader;
 *     string ipHeader;
 *     string dllHeader;
 *     string phyHeader;
 * }
 * </pre>
 */
class TcpIpPacket : public ::omnetpp::cPacket
{
  protected:
    int srcAdd = 0;
    int destAdd = 0;
    applicationPacket appHeader;
    int tcpHeader = 0;
    omnetpp::opp_string ipHeader;
    omnetpp::opp_string dllHeader;
    omnetpp::opp_string phyHeader;

  private:
    void copy(const TcpIpPacket& other);

  protected:
    bool operator==(const TcpIpPacket&) = delete;

  public:
    TcpIpPacket(const char *name=nullptr, short kind=0);
    TcpIpPacket(const TcpIpPacket& other);
    virtual ~TcpIpPacket();
    TcpIpPacket& operator=(const TcpIpPacket& other);
    virtual TcpIpPacket *dup() const override {return new TcpIpPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcAdd() const;
    virtual void setSrcAdd(int srcAdd);

    virtual int getDestAdd() const;
    virtual void setDestAdd(int destAdd);

    virtual const applicationPacket& getAppHeader() const;
    virtual applicationPacket& getAppHeaderForUpdate() { return const_cast<applicationPacket&>(const_cast<TcpIpPacket*>(this)->getAppHeader());}
    virtual void setAppHeader(const applicationPacket& appHeader);

    virtual int getTcpHeader() const;
    virtual void setTcpHeader(int tcpHeader);

    virtual const char * getIpHeader() const;
    virtual void setIpHeader(const char * ipHeader);

    virtual const char * getDllHeader() const;
    virtual void setDllHeader(const char * dllHeader);

    virtual const char * getPhyHeader() const;
    virtual void setPhyHeader(const char * phyHeader);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TcpIpPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TcpIpPacket& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const applicationPacket *p) {return any_ptr(p);}
template<> inline applicationPacket *fromAnyPtr(any_ptr ptr) { return ptr.get<applicationPacket>(); }
template<> inline TcpIpPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<TcpIpPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __PACKET_M_H

